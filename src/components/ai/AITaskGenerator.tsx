
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { CalendarIcon, Sparkles, Upload } from 'lucide-react';
import { format } from 'date-fns';
import { Calendar } from '@/components/ui/calendar'
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { cn } from '@/lib/utils';
import { users } from '@/data/mockData';
import { useAuth } from '@/context/AuthContext';
import { toast } from 'sonner';

interface AITaskGeneratorProps {
  teamId: string;
  onClose?: () => void;
}

export const AITaskGenerator = ({ teamId, onClose }: AITaskGeneratorProps) => {
  const { currentUser } = useAuth();
  const [prompt, setPrompt] = useState('');
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [assigneeId, setAssigneeId] = useState('');
  const [priority, setPriority] = useState('medium');
  const [dueDate, setDueDate] = useState<Date>();
  const [isGenerating, setIsGenerating] = useState(false);
  const [isTaskGenerated, setIsTaskGenerated] = useState(false);
  const [attachments, setAttachments] = useState<File[]>([]);

  const teamMembers = users.filter(user =>
    user.teamId === teamId && user.role === 'employee'
  );

  const handleGenerateTask = async () => {
    if (!prompt.trim()) {
      toast.error('Please enter a task description first');
      return;
    }

    setIsGenerating(true);
    setIsTaskGenerated(false);

    try {
      const response = await fetch('http://localhost:8000/api/task-generator', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          team_id: teamId,
          context: prompt,
        }),
      });

      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.detail || 'AI generation failed');
      }

      const data = await response.json();
      setTitle(data.task_title);
      setDescription(data.task_description);
      setPriority('medium'); // Default fallback
      setIsTaskGenerated(true);
      toast.success('Task generated by AI');
    } catch (error: any) {
      toast.error(error.message || 'Error generating task');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCreateTask = () => {
    if (!title || !description || !assigneeId || !dueDate) {
      toast.error('Please fill in all required fields');
      return;
    }

    // Replace with actual API call
    toast.success('Task created successfully');
    if (onClose) onClose();
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    setAttachments(prev => [...prev, ...files]);
  };

  const removeAttachment = (index: number) => {
    setAttachments(prev => prev.filter((_, i) => i !== index));
  };

  return (
    <div className="space-y-4 py-2">
      {!isTaskGenerated ? (
        <>
          <div className="space-y-2">
            <Label htmlFor="prompt">Describe the task you'd like to create</Label>
            <Textarea
              id="prompt"
              placeholder="E.g. Create a dashboard mockup for our team's analytics"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              rows={4}
            />
          </div>

          <Button
            className="w-full"
            onClick={handleGenerateTask}
            disabled={isGenerating}
          >
            <Sparkles className="mr-2 h-4 w-4" />
            {isGenerating ? 'Generating...' : 'Generate Task with AI'}
          </Button>
        </>
      ) : (
        <>
          <div className="border-l-4 border-bloom-purple bg-bloom-purple/5 p-3 mb-4">
            <div className="flex items-center gap-2 text-sm text-bloom-purple">
              <Sparkles className="h-4 w-4" />
              <span className="font-medium">AI-Generated Task</span>
            </div>
          </div>

          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="title">Task Title</Label>
              <div className="border rounded-md p-3 bg-muted text-sm">
                <ReactMarkdown remarkPlugins={[remarkGfm]}>{title}</ReactMarkdown>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Task Description</Label>
              <div className="prose prose-sm max-w-none border rounded-md p-3 bg-muted text-sm">
                <ReactMarkdown remarkPlugins={[remarkGfm]}>{description}</ReactMarkdown>
              </div>
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="assignee">Assign To</Label>
                <Select value={assigneeId} onValueChange={setAssigneeId}>
                  <SelectTrigger id="assignee">
                    <SelectValue placeholder="Select team member" />
                  </SelectTrigger>
                  <SelectContent>
                    {teamMembers.map(member => (
                      <SelectItem key={member.id} value={member.id}>
                        {member.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="priority">Priority</Label>
                <Select value={priority} onValueChange={setPriority}>
                  <SelectTrigger id="priority">
                    <SelectValue placeholder="Select priority" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="low">Low</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="high">High</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="dueDate">Due Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    id="dueDate"
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal",
                      !dueDate && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {dueDate ? format(dueDate, "PPP") : "Select due date"}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start" side="bottom">
                  <Calendar
                    mode="single"
                    selected={dueDate}
                    onSelect={setDueDate}
                    initialFocus
                    className="p-3 pointer-events-auto"
                  />
                </PopoverContent>
              </Popover>
            </div>

            <div className="space-y-2">
              <Label>Attachments</Label>
              <div className="border-2 border-dashed rounded-lg p-4 hover:bg-accent/50 transition-colors">
                <label className="flex flex-col items-center gap-2 cursor-pointer">
                  <Upload className="h-8 w-8 text-muted-foreground" />
                  <span className="text-sm text-muted-foreground">Upload files</span>
                  <input
                    type="file"
                    multiple
                    className="hidden"
                    onChange={handleFileChange}
                  />
                </label>
              </div>
              {attachments.length > 0 && (
                <div className="mt-2 space-y-2 max-h-40 overflow-y-auto">
                  {attachments.map((file, index) => (
                    <div key={index} className="flex items-center justify-between bg-accent/50 p-2 rounded">
                      <span className="text-sm truncate max-w-[80%]">{file.name}</span>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => removeAttachment(index)}
                      >
                        Remove
                      </Button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <Button variant="outline" onClick={() => setIsTaskGenerated(false)}>
              Back
            </Button>
            <Button onClick={handleCreateTask}>
              Create Task
            </Button>
          </div>
        </>
      )}
    </div>
  );
};
